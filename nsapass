#!/usr/bin/python3
# nsapass  Copyright (C) <2020>  <caveman>
# licensed under GPLv3 for details read LICENSE in
# https://github.com/al-caveman/nsapass
import argparse
import os
import sys
import string
import json
import subprocess
import textwrap
import time
import secrets
import tempfile
import atexit

#######################################
#                                     #
#            configs below            #
#                                     #
#######################################

# location of encrypted passwords db
DB = os.path.expanduser('~/.local/share/nsapass/db.enc')
DBLOCK = DB + '.lock'

# how many seconds should copied passwords remain in the clipboard?
COPYLIFE = 5

# what to copy in order to delete previous copy?
COPYDEL = '~\o deleted by nsapassâ„¢ o/~'

# password character sets
SETS = {
    'alphanumerics' : string.ascii_letters + string.digits,
    'hexdigits' : string.hexdigits,
    'printable' : ' ' + ''.join(c for c in string.printable if c not in
    string.whitespace),
}

# command to load passwords db
DECCMD = ['scrypt', 'dec', DB]

# command to save passwords db (must read plaintext from stdin)
ENCCMD = ['scrypt', 'enc', '-', '{}']

# command to paste into clipboard (must accept data from stdin)
CLIPCMD = ['xclip', '-selection', 'clipboard']

# verbosity
SHOW_INFO = True
SHOW_DEBUG = False # can be enabled by -d flag
SHOW_WARN = True
SHOW_ERR = True
SHOW_PASSWORDS = False # can be enabled by -z flag

# theme
THEME = {
    'BANNER' : '\33[0;90m',
    'INFO' : '\33[1;32m',
    'DEBUG' : '\33[1;33m',
    'WARN' : '\33[1;33m',
    'ERR' : '\33[1;31m',
    'CLR' : '\33[0m',
    'P' : '\33[0;41m',
}

#######################################
# WARNING: normal ppl plz no looking! #
# WARNING: nude app bits ahead!       #
#             (devs only)             #
#######################################
SECTION_ARCHIVE = 'archive'
SECTION_ENTRIES = 'entries'
KEY_PASS = 'pass'
KEY_NOTE = 'note'

def print_info(msg):
    if SHOW_INFO:
        sys.stdout.write('{INFO}*{CLR} {}\n'.format(msg, **THEME))
        sys.stdout.flush()

def print_debug(msg):
    if SHOW_DEBUG:
        sys.stdout.write('{DEBUG}D{CLR} {}\n'.format(msg, **THEME))
        sys.stdout.flush()

def print_warn(msg):
    if SHOW_WARN:
        sys.stderr.write('{WARN}*{CLR} {}\n'.format(msg, **THEME))
        sys.stderr.flush()

def print_err(msg):
    if SHOW_ERR:
        sys.stderr.write('{ERR}*{CLR} {}\n'.format(msg, **THEME))
        sys.stderr.flush()

def print_entry(name, i, section, d):
    if name is None:
        try:
            names = sorted(d[section])
        except KeyError:
            print_err('section "{}" not found in db.'.format(section))
            print_err('exiting...')
            sys.exit(1)
    else:
        names = [name]
    for n in names:
        if i is None:
            start = 0
            try:
                end = len(d[section][n])
            except KeyError:
                print_err('"{}/{}" not found.'.format(section, n))
                print_err('exiting...')
                sys.exit(1)
        else:
            start = i
            end = i + 1
        print('    {}'.format(n))
        for j in range(start, end):
            try:
                if section == SECTION_ARCHIVE:
                    index = 'a{}'.format(j)
                else:
                    index = str(j)
                if SHOW_PASSWORDS:
                    password = d[section][n][j][KEY_PASS]
                else:
                    password = '*********'
                indent = ' '*(8+len(index)+2)
                if d[section][n][j][KEY_NOTE] is None:
                    note = d[section][n][j][KEY_NOTE]
                else:
                    note = textwrap.fill(d[section][n][j][KEY_NOTE],
                        initial_indent=indent, subsequent_indent=indent)
            except (KeyError, IndexError):
                print_err('"{}/{}/{}" not found.'.format(section, n, j))
                print_err('exiting...')
                sys.exit(1)
            if SHOW_PASSWORDS:
                print('        {}  {P}{}{CLR}'.format(index, password,
                    **THEME))
            else:
                print('        {}  {}'.format(index, password))
            if note is not None:
                print('{}'.format(note))
        sys.stdout.flush()

def cmd(cmd, stdin=None, stdout=subprocess.PIPE):
    print_debug('running "{}"...'.format(' '.join(cmd)))
    c = subprocess.run(cmd, input=stdin, stdout=stdout)
    if c.returncode != 0:
        print_err('command failed')
        sys.exit(1)
    return c.stdout

def load(lock=False):
    if lock:
        dirname = os.path.dirname(DBLOCK)
        os.makedirs(dirname, exist_ok=True)
        try:
            open(DBLOCK, 'xb').close()
        except FileExistsError:
            print_err('lock file "{}" already exists'.format(DBLOCK))
            print_err('if no other instances of "nsapass" are running '
                'remove the lock file manually')
            print_err('exiting...')
            sys.exit(1)
        atexit.register(os.unlink, DBLOCK)
    if not os.path.exists(DB):
        print_warn('passwords db "{}" not found.'.format(DB))
        print_warn('creating new...')
        dirname = os.path.dirname(DB)
        os.makedirs(dirname, exist_ok=True)
        return {SECTION_ENTRIES:{}, SECTION_ARCHIVE:{}}
    print_info('loading db...')
    data = cmd(DECCMD)
    try:
        return json.loads(data)
    except json.JSONDecodeError:
        print_err('error decoding database "{}"'.format(DB))
        print_err('delete that file if you want to create a new database')
        print_err('exiting...')
        sys.exit(1)

def save(d):
    print_info('saving db...')
    data = json.dumps(d, indent=4)
    tempDB = tempfile.NamedTemporaryFile(prefix=DB, delete=False)
    delete = True
    try:
        cmd([p.format(tempDB.name) for p in ENCCMD], stdin=data.encode())
        os.rename(tempDB.name, DB)
        delete = False
    finally:
        if delete:
            os.unlink(tempDB.name)
        tempDB.close()

def parse_index(index):
    try:
        if index[0] == 'a':
            i = int(index[1:])
            section = SECTION_ARCHIVE
        else:
            i = int(index)
            section = SECTION_ENTRIES
    except ValueError:
        print_err('bad index "{}".'.format(index))
        print_err('exiting...')
        sys.exit(1)
    return i, section

def nsa_get(name, index):
    if index is None:
        print_debug('index not given, assuming "0"...')
        index = '0'
    i, section = parse_index(index)
    d = load()
    print_info('getting password...')
    print_entry(name, i, section, d)
    print_info('copying password...')
    password = d[section][name][i][KEY_PASS]
    cmd(CLIPCMD, stdin=password.encode(), stdout=None)
    print_info('deleting in {} seconds...'.format(COPYLIFE))
    try:
        time.sleep(COPYLIFE)
    except KeyboardInterrupt:
        print_warn('received keyboard interrupt.')
    print_info('deleting...')
    cmd(CLIPCMD, stdin=COPYDEL.encode(), stdout=None)

def nsa_add(name, password, note, d=None, save_d=True):
    if d is None:
        d = load(lock=True)
    print_info('adding entry...')
    entry = {KEY_PASS:password, KEY_NOTE:note}
    if name in d[SECTION_ENTRIES]:
        d[SECTION_ENTRIES][name].append(entry)
    else:
        d[SECTION_ENTRIES][name] = [entry]
    print_entry(name, len(d[SECTION_ENTRIES][name])-1, SECTION_ENTRIES, d)
    if save_d:
        save(d)

def nsa_gen(name, length, setname, note):
    try:
        length = int(length)
        if length < 1:
            print_err('bad length "{}".'.format(length))
            print_err('exiting...')
            sys.exit(1)
    except ValueError:
        print_err('bad length "{}".'.format(length))
        print_err('exiting...')
        sys.exit(1)
    try:
        symset = SETS[setname]
    except KeyError:
        print_err('bad symbols set "{}".  options:'.format(setname))
        for k in SETS:
            print_err('    {}'.format(k))
        print_err('you can define more by updating SETS variable.')
        print_err('exiting...')
        sys.exit(1)
    print_info('generating {}-chars password from "{}"...'.format(length,
    setname))
    while True:
        password = ''.join(secrets.choice(symset) for i in range(0, length))
        if input('    {P}{}{CLR} happy? [N/y] '.format(password,
        **THEME)) == 'y':
            break
    nsa_add(name, password, note)

def nsa_del(name, index, d=None, save_d=True):
    i, section = parse_index(index)
    if not os.path.exists(DB):
        print_err('passwords db "{}" not found.'.format(DB))
        print_err('exiting...')
        sys.exit(1)
    if d is None:
        d = load(lock=True)
    print_info('deleting entry...')
    print_entry(name, i, section, d)
    if section == SECTION_ENTRIES:
        print_info('backing entry into archive...')
        entry = d[SECTION_ENTRIES][name][i]
        if name in d[SECTION_ARCHIVE]:
            d[SECTION_ARCHIVE][name].append(entry)
        else:
            d[SECTION_ARCHIVE][name] = [entry]
    if len(d[section][name]) > 1:
        del d[section][name][i]
    else:
        del d[section][name]
    if save_d:
        save(d)

def nsa_undel(name, index):
    i, section = parse_index(index)
    if section != SECTION_ARCHIVE:
        print_err('"{}/{}" is already unarchived.'.format(section, name,
        i))
        print_err('exiting...')
        sys.exit(1)
    d = load(lock=True)
    password = d[section][name][i][KEY_PASS]
    note = d[section][name][i][KEY_NOTE]
    nsa_add(name, password, note, d=d, save_d=False)
    nsa_del(name, index, d=d, save_d=False)
    save(d)

def nsa_mod(name, index, new_name, new_pass, new_note):
    i, section = parse_index(index)
    d = load(lock=True)
    if new_name is None:
        new_name = name
    if new_pass is None:
        new_pass = d[section][name][i][KEY_PASS]
    if new_note is None:
        new_note = d[section][name][i][KEY_NOTE]
    if len(new_note) == 0:
        new_note = None
    nsa_add(new_name, new_pass, new_note, d=d, save_d=False)
    nsa_del(name, index, d=d, save_d=False)
    save(d)

def nsa_list(show_archive):
    d = load()
    print_info('listing section {}...'.format(SECTION_ENTRIES))
    print_entry(None, None, SECTION_ENTRIES, d)
    if show_archive:
        print_info('listing section {}...'.format(SECTION_ARCHIVE))
        print_entry(None, None, SECTION_ARCHIVE, d)

def nsa_changepass():
    d = load(lock=True)
    save(d)

# parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('-d', action='store_true', help="enable debugging")
parser.add_argument('-z', action='store_true', help="show passwords")
subparsers = parser.add_subparsers(title='commands', dest='command')
# get
p_get = subparsers.add_parser('get', help="load a password to clipboard")
p_get.add_argument('name', metavar='NAME', type=str, help="a username")
p_get.add_argument('index', metavar='INDEX', type=str, nargs='?',
                    help="password index.  default '0'.")
# add
p_add = subparsers.add_parser('add', help="add a password entry")
p_add.add_argument('name', metavar='NAME', type=str, help="a username")
p_add.add_argument('passwd', metavar='PASS', type=str, help="a password")
p_add.add_argument('note', metavar='NOTE', type=str, nargs='?',
                    help="a note")
# gen
p_gen = subparsers.add_parser('gen', help="generate a password entry")
p_gen.add_argument('name', metavar='NAME', type=str, help="a username")
p_gen.add_argument('length', metavar='LEN', type=int,
                    help="number of symbols")
p_gen.add_argument('set', metavar='SET', type=str,
                    help="name of passwords symbols set (defined in"
                    " SETS)")
p_gen.add_argument('note', metavar='NOTE', type=str, nargs='?',
                    help="a note")
# del
p_del = subparsers.add_parser('del', help="delete a password entry")
p_del.add_argument('name', metavar='NAME', type=str, help="a username")
p_del.add_argument('index', metavar='INDEX', type=str,
                    help="password index")
# undel
p_undel = subparsers.add_parser('undel', help="undelete a password entry")
p_undel.add_argument('name', metavar='NAME', type=str, help="a username")
p_undel.add_argument('index', metavar='INDEX', type=str,
                    help="password index")
# mod
p_mod = subparsers.add_parser('mod', help="modify a password entry")
p_mod.add_argument('name', metavar='NAME', type=str, help="a username")
p_mod.add_argument('index', metavar='INDEX', type=str,
                    help="password index")
p_mod.add_argument('-n', metavar='NEWNAME', type=str,
                    help="a new username")
p_mod.add_argument('-p', metavar='NEWPASS', type=str,
                    help="a new password")
p_mod.add_argument('-c', metavar='NEWNOTE', type=str,
                    help="a new note")
# list
p_list = subparsers.add_parser('list', help="list passwords entries")
p_list.add_argument('-a', action='store_true', help="show archive")
# changepass
p_changepass = subparsers.add_parser('changepass', help="change"
                                    " databases's password")
args = parser.parse_args()
banner = """{BANNER}\
nsapassâ„¢ â€” all your passwords are safely stored with us!
licensed under teh GNU GPLv3.

for a copy of the LICENSE file, the README file, bug reports, feature
requests, and much MUCH more free and tax-exempt awesomness, visit our
project's page: https://github.com/al-caveman/nsapass !

for permanent settings edit the file "{}".
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
{CLR}""".format(sys.argv[0], **THEME)
try:
    if args.d:
        SHOW_DEBUG = True
    if args.z:
        SHOW_PASSWORDS = True
    if args.command is None:
        sys.stderr.write(banner)
        parser.print_help()
    elif args.command == 'get':
        nsa_get(args.name, args.index)
    elif args.command == 'add':
        nsa_add(args.name, args.passwd, args.note)
    elif args.command == 'gen':
        nsa_gen(args.name, args.length, args.set, args.note)
    elif args.command == 'del':
        nsa_del(args.name, args.index)
    elif args.command == 'undel':
        nsa_undel(args.name, args.index)
    elif args.command == 'mod':
        nsa_mod(args.name, args.index, args.n, args.p, args.c)
    elif args.command == 'list':
        nsa_list(args.a)
    elif args.command == 'changepass':
        nsa_changepass()
except KeyboardInterrupt:
    print_warn('received keyboard interrupt.')
    print_warn('exiting...')
