#!/usr/bin/python3
# nsapass  Copyright (C) <2020>  <caveman>
# licensed under GPLv3 for details read LICENSE in
# https://github.com/al-caveman/nsapass
import argparse
import os
import sys
import string
import json
import subprocess
import time
import secrets
import atexit
import getpass
import pexpect
import base64
import shlex
import textwrap
import tempfile
import signal

#######################################
#                             __      #
#           configs below   <(o )___  #
#                            ( ._> /  #
#######################################

# location of pid dir
PID = '/tmp/nsapass'

# location of encrypted passwords db
DB = os.path.expanduser('~/.local/share/nsapass/db.enc')

# how many seconds should copied passwords remain in the clipboard?
COPYLIFE = 30

# what to copy in order to delete previous copy?
COPYDEL = '~\o deleted by nsapassâ„¢ o/~'

# password character sets
SETS = {
    'alphanumerics' : string.ascii_letters + string.digits,
    'hexdigits' : string.hexdigits,
    'printable' : ' ' + ''.join(c for c in string.printable if c not in
    string.whitespace),
}

# command to load passwords db
DECCMD = 'scrypt dec {}'
DECPROMPTS = ['Please enter passphrase: ']

# command to save passwords db (must read plaintext from stdin)
ENCCMD = 'scrypt enc - {}'
ENCPROMPTS = ['Please enter passphrase: ', 'Please confirm passphrase: ']

# command to paste into clipboard (must accept data from stdin)
CLIPCMD = 'xclip -selection clipboard'

# theme
THEME = {
    'BANNER': '\33[0;90m',
    'INFO'  : '\33[1;32m',
    'WARN'  : '\33[1;33m',
    'ERR'   : '\33[1;31m',
    'CLR'   : '\33[0m',
    'PASS'  : '\33[0;41m', # passwords color
    'PROMPT': '\33[0;34m',
    'KEY'   : '\33[0;90m',
    'TAGS'  : '\33[1;32m',
    'ARC'   : '\33[0;31m', # archived flag
}

#########################################
# WARNING: normal ppl plz no looking!   #
# WARNING: nude app bits ahead!         #
#             (devs only)               #
#########################################

KEY_TAGS = 'tags'
KEY_USERNAME= 'username'
KEY_PASS = 'password'
KEY_DATAB64 = 'datab64s'
KEY_NOTE = 'note'
KEY_TIME = 'timestamp'
KEY_ARC = 'archived'

def frmtpass(password, showpass, limit=0):
    """formats passwords based on its visibility setting"""
    if showpass:
        summary = ''
        if limit and len(password) > limit:
            summary = f'... ({len(password)} letters)'
            password = password[:limit]
        return '{PASS}{}{CLR}{}'.format(password, summary, **THEME)
    return '**********'

def frmtask(msg):
    return '{PROMPT}< {}{CLR} '.format(msg, **THEME)

def printinfo(msg, counter=0):
    sys.stderr.write('{INFO}*{CLR} {}'.format(msg, **THEME))
    sys.stderr.flush()
    try:
        for i in range(0, counter):
            sys.stderr.write('.')
            sys.stderr.flush()
            time.sleep(1)
        sys.stderr.write('\n')
    except KeyboardInterrupt:
        printwarn('expiring counter...')

def printwarn(msg):
    sys.stderr.write('{WARN}*{CLR} {}\n'.format(msg, **THEME))
    sys.stderr.flush()

def exit(msg):
    sys.stderr.write('{ERR}*{CLR} {}\n'.format(msg, **THEME))
    sys.stderr.write('{ERR}*{CLR} {}\n'.format('exiting...', **THEME))
    sys.stderr.flush()
    sys.exit(1)

def cleanwords(words):
    if type(words) is list:
        words = ' '.join(words)
    words = ' '.join(words.split())
    return None if words == '' else words

def wrap(text, subseq_indent):
    termwidth = os.get_terminal_size()[0]
    width = termwidth - len(subseq_indent)
    wrapped_list = textwrap.wrap(text, width)
    return f'\n{subseq_indent}'.join(wrapped_list)

def search(query, options):
    """searches for a string.  query can be a tags list or tags string"""
    query = cleanwords(query)
    printinfo(f'searching with "{query}"...')
    if query is None:
        return options
    if query in options:
        return [query]
    words = query.split()
    matches = []
    for o in options:
        tags = o.split()
        try:
            if {tags[i].find(w) for i,w in enumerate(words)} == {0}:
                matches.append(o)
        except IndexError:
            pass
    return sorted(matches)

def ttyinput(prompt):
    sys.stdin = open('/dev/tty')
    return input(prompt)

def askpass(name):
    """prompts users for password"""
    while True:
        pass1 = getpass.getpass(frmtask(f'new {name} password:'))
        pass2 = getpass.getpass(frmtask(f'confirm {name} pass:'))
        if pass1 == pass2:
            return pass1
        printwarn('passwords mismatched.  retrying...')

def genpass(length, psetname, showpass):
    """generate password"""
    try:
        length = int(length)
        if length < 1:
            exit(f'LEN "{length}" is not positive')
    except TypeError:
        exit(f'LEN "{length}" is not int')
    try:
        pset = SETS[psetname]
    except KeyError:
        exit(f'bad SET "{psetname}".  valid options: {", ".join(SETS)}')
    printinfo(f'making a {length}-chars key from "{psetname}"...')
    while True:
        password = ''.join(secrets.choice(pset) for i in range(0, length))
        if showpass:
            sys.stderr.write(frmtpass(password, showpass) + '\n')
            ans = ttyinput(frmtask('happy? [y/N]'))
            if ans == 'y':
                return password
        else:
            return password

def readdata(filein):
    """read binary data from stdin"""
    if filein == '-':
        printinfo(f'reading binary data from stdin...')
        data = sys.stdin.buffer.read()
        if len(data) == 0:
            exit('no data read from stdin')
    else:
        printinfo(f'reading binary data from "{filein}"...')
        try:
            with open(filein, 'rb') as f:
                data = f.read()
        except FileNotFoundError:
            exit(f'file "{filein}" not found')
    datab64s = base64.b64encode(data).decode()
    return datab64s

def newpass(gen, manual, filein, showpass, required=False):
    password = None
    datab64s = None
    if gen is not None:
        password = genpass(gen[0], gen[1], showpass)
    if manual:
        password = askpass('entry')
    if filein is not None:
        datab64s = readdata(filein)
    if required and password is None and datab64s is None:
        exit('password, or key, is required')
    return (password, datab64s)

def newtags(tags, required=False):
    """picks a new set of tags"""
    if tags is None and not required:
        return None
    while True:
        tags = cleanwords(tags)
        if tags is None:
            tags = ttyinput(frmtask('specify tags:'))
        else:
            return tags

def run(cmd, prompts=[], password=None, stdout=False, stdin=None,
    exitonerror=False):
    """runs and interacts with external commands"""
    try:
        child = pexpect.spawn(cmd, encoding='utf-8')
    except pexpect.exceptions.ExceptionPexpect as e:
        exit(f'pexpect exception: {e}')
    for prompt in prompts:
        try:
            child.expect_exact(prompt)
        except pexpect.exceptions.TIMEOUT:
            exit(f'prompt "{prompt}" not matched')
        child.sendline(password)
    if stdin is not None:
        child.sendline(stdin)
        child.sendeof()
        child.sendeof()
    try:
        data = child.read() if stdout else None
    except pexpect.exceptions.TIMEOUT:
        exit('command took too long to print to stdout')
    exitstatus = child.wait()
    if exitstatus != 0:
        msg = f'`{cmd}` returned {exitstatus}'
        exit(msg) if exitonerror else printwarn(msg)
    return data, exitstatus

def lock():
    """lock passwords database file"""
    printinfo('locking db...')
    lockDB = DB + '.lock'
    dirname = os.path.dirname(lockDB)
    os.makedirs(dirname, exist_ok=True)
    try:
        open(lockDB, 'xb').close()
    except FileExistsError:
        exit(f'lock file "{lockDB}" exists.  delete it if not used')
    atexit.register(os.unlink, lockDB)
    atexit.register(printinfo, 'unlocking db...')

def load(nonempty=False):
    """load passwords database"""
    printinfo('loading db...')
    if os.path.exists(DB):
        cmd = DECCMD.format(DB)
        while True:
            dbpass = getpass.getpass(frmtask('database password:'))
            data, exitstatus = run(cmd, DECPROMPTS, dbpass, stdout=True)
            if exitstatus == 0:
                break
    else:
        printwarn(f'"{DB}" not found')
        dbpass = None
        data = '{}'
    try:
        db = json.loads(data)
    except json.JSONDecodeError:
        exit(f'error decoding database "{DB}"')
    if len(db) == 0 and nonempty:
        exit('database is empty')
    return db, dbpass

def save(db, dbpass):
    """save passwords database"""
    if dbpass is None:
        dbpass = askpass('database')
    while True:
        ans = ttyinput(frmtask('save? [y/n]'))
        if ans == 'y':
            break
        if ans == 'n':
            return
    printinfo('saving db...')
    data = json.dumps(db, indent=4)
    tmpDB = DB + '.temp'
    cmd = ENCCMD.format(tmpDB)
    try:
        run(cmd, ENCPROMPTS, dbpass, stdin=data, exitonerror=True)
        os.rename(tmpDB, DB)
    finally:
        try:
            os.unlink(tmpDB)
        except FileNotFoundError:
            pass

def picktags(db, query, arc=False):
    """picks a unique tags entry"""
    options = [t for t in db if db[t][0][KEY_ARC] is arc]
    while True:
        matches = search(query, options)
        if len(matches) == 0:
            printwarn('no match.  available tags list:')
            for o in options:
                sys.stderr.write(f'    {o}\n')
        elif len(matches) > 1:
            printwarn('too many matched tags:')
            for o in matches:
                sys.stderr.write(f'    {o}\n')
        elif len(matches) == 1:
            printinfo(f'matched: {matches[0]}')
            return matches[0]
        query = ttyinput(frmtask('specify query tags:'))

def pickrev(db, tags, rev, required=False):
    "pick a unique revision"""
    if not required:
        if rev is None:
            printinfo('revision defaulting to 0...')
            return 0
        return rev
    revs = range(0, len(db[tags]))
    while True:
        if rev in revs:
            return rev
        rev = ttyinput(frmtask(f'pick REV in {{0, ..., {len(revs)-1}}}:'))
        try:
            rev = int(rev)
            if rev < 0:
                printwarn('revision must be positive')
        except ValueError:
            printwarn('revision must be an integer')

def printentry(db, tags, showpass=False, showold=False):
    """print a password entry"""
    sys.stderr.write('  {TAGS}{}{CLR}{ARC}{}{CLR}\n'.format(
        tags, ' [archived]' if db[tags][0][KEY_ARC] else '', **THEME))
    indent = '    '
    for r in range(0, len(db[tags]) if showold else 1):
        if r:
            sys.stderr.write('      {KEY}{}:{CLR} {}\n'.format(
                'revision', r, **THEME))
            indent = '        '
            sys.stderr.write('{}{KEY}{:9}:{CLR} {}{ARC}{}{CLR}\n'.format(
                indent, 'tags', db[tags][r][KEY_TAGS], ' [archived]' if
                db[tags][r][KEY_ARC] else '', **THEME))
        for key in [KEY_USERNAME, KEY_PASS, KEY_DATAB64, KEY_TIME,
            KEY_NOTE]:
            value = db[tags][r][key]
            if value is None:
                continue
            if key == KEY_PASS:
                value = frmtpass(value, showpass)
            elif key == KEY_DATAB64:
                value = frmtpass(value, showpass, 30)
            elif key == KEY_TIME:
                value = time.ctime(value)
            elif key == KEY_NOTE:
                keywidth = 11
                subseq_indent = indent + ' ' * keywidth
                value = wrap(value, subseq_indent)
            sys.stderr.write('{}{KEY}{:9}:{CLR} {}\n'.format(
                indent, key, value, **THEME))

def cp(db, tags, rev, field, copy=True):
    """copy a field from db into clipboard"""
    value = db[tags][rev][field]
    if value is None:
        exit(f'{field} is empty')
    if field == KEY_DATAB64:
        return sys.stdout.buffer.write(base64.b64decode(value))
    if not copy:
        printinfo(f'stdout is piped.  printing {field} to stdout...')
        return sys.stdout.write(value)
    cpcmd = f"echo -n {shlex.quote(value)} | {CLIPCMD}"
    delcmd = f"echo -n {shlex.quote(COPYDEL)} | {CLIPCMD}"
    run('sh', stdin=cpcmd, exitonerror=True)
    printinfo(f'{field} copied for {COPYLIFE} seconds', counter=COPYLIFE)
    run('sh', stdin=delcmd, exitonerror=True)

def add(db, tags, username, password, datab64s, note):
    """add a new entry from db"""
    printinfo('adding entry...')
    entry = {KEY_TAGS:tags, KEY_USERNAME:username, KEY_PASS:password,
        KEY_DATAB64:datab64s, KEY_NOTE:note, KEY_TIME:time.time(),
        KEY_ARC:False}
    if tags in db:
        printwarn(f'"{tags}" exists.  additing as a new revision...')
        db[tags].insert(0, entry)
    else:
        db[tags] = [entry]

def delete(db, tags):
    """delete an entry from db"""
    if db[tags][0][KEY_ARC]:
        del db[tags]
    else:
        tmp = dict(db[tags][0])
        tmp[KEY_ARC] = True
        tmp[KEY_TIME] = time.time()
        db[tags].insert(0, tmp)

def undelete(db, tags):
    """undelete an entry from db"""
    if db[tags][0][KEY_ARC]:
        tmp = dict(db[tags][0])
        tmp[KEY_ARC] = False
        tmp[KEY_TIME] = time.time()
        db[tags].insert(0, tmp)

def timetravel(db, tags, rev):
    """travel into time rev"""
    printinfo('traveling through time...')
    tmp = db[tags].pop(rev)
    db[tags].insert(0, tmp)
    db[tmp[KEY_TAGS]] = db.pop(tags)

def modify(db, cur_tags, new_tags, username, password, datab64s, note):
    """modify an entry from db"""
    printinfo('modifying...')
    tmp = dict(db[cur_tags][0])
    if new_tags is not None:
        tmp[KEY_TAGS] = new_tags
    if username is not None:
        tmp[KEY_USERNAME] = None if username == '' else username
    if password is not None:
        tmp[KEY_PASS] = None if password == '' else password
    if datab64s is not None:
        tmp[KEY_DATAB64] = None if datab64s == '' else datab64s
    if note is not None:
        tmp[KEY_NOTE] = None if note == '' else note
    tmp[KEY_TIME] = time.time()
    db[cur_tags].insert(0, tmp)
    if new_tags is not None:
        db[new_tags] = db.pop(cur_tags)

def forget(db, tags, retain):
    """forget the distant past of an entry from db"""
    printwarn('forgetting distant memories...')
    db[tags] = db[tags][0:retain+1]

# parse arguments
# commands are specified by their name, list of command arguments, and
# extra named arguments for `add_parser`.
# arguments are specified by their named arguments to `add_argument`.
# 'PASSWORD' stands for `[-g LEN SET | -m]` and is handled separately.
allcmds = [
    ['cp', ['tags', '-r', '-a', '-z'],
        {'help':'copy username/password.  print password if piped'}],
    ['cat', ['tags', '-r', '-a', '-z'],
        {'help':'print key file'}],
    ['add', ['tags', '-u', 'PASSWORD', '-n', '-z'],
        {'help':'add an entry'}],
    ['del', ['tags', '-a', '-z'],
        {'help':'delete an entry'}],
    ['undel', ['tags', '-z'],
        {'help':'undelete an entry'}],
    ['mod', ['tags', '-t', '-u', 'PASSWORD', '-n', '-a', '-z'],
        {'help':'modify an entry'}],
    ['undo', ['tags', '-r', '-a', '-z'],
        {'help':'travel through time'}],
    ['forget', ['tags', '-r', '-a', '-z'],
        {'help':'forget the past of an entry'}],
    ['ls', ['tags', '-o', '-a', '-z'],
        {'help':'view entries'}],
    ['chpass', [],
        {'help':"change databases's password"}],
    ['2', [],
        {'help':"send signal 2 (SIGINT) to all nsapass processes. "
            "this is useful to use keyboard shortcuts to cause nsapass to "
            "immediately move to copy passwords without needing to wait "
            "for the timer to expire for the username"}]
]
allargs = {
    'tags': {'metavar':'TAG', 'type':str, 'nargs':'*',
            'help':'query tags'},
    '-r': {'metavar':'REV', 'type':int,
        'help':"revision index to travel to"},
    '-o': {'action':'store_true', 'help':'show old history'},
    '-a': {'action':'store_true', 'help':'work on the archive'},
    '-z': {'action':'store_true', 'help':'show passwords'},
    '-t': {'metavar':'TAG', 'type':str, 'nargs':'+',
        'help':"new entry's tags"},
    '-u': {'metavar':'USERNAME', 'type':str, 'help':'new username'},
    '-n': {'metavar':'NOTE', 'type':str, 'help':'new note'},
}
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title='commands', dest='command')
for cmd_name, cmd_args, cmd_named in allcmds :
    subp = subparsers.add_parser(cmd_name, **cmd_named)
    for arg in cmd_args:
        if arg == 'PASSWORD':
            muex = subp.add_mutually_exclusive_group()
            muex.add_argument('-g', metavar=('LEN', 'SET'),
                nargs=2, type=str,
                help='generate a new LEN-long password from SET')
            muex.add_argument('-m', action='store_true',
                help='manually define password')
            subp.add_argument('-f', metavar='FILE', type=str,
                help='key via file FILE, or STDIN if FILE is "-"')
        else:
            subp.add_argument(arg, **allargs[arg])
args = parser.parse_args()

# part where stuff start happening
banner = """{BANNER}\
nsapassâ„¢ â€” all your schlÃ¼ssel are safely stored with us!â„¢
licensed under the GNU GPLv3.
https://github.com/Al-Caveman/nsapass/

for permanent settings edit the file "{}".
{CLR}
""".format(sys.argv[0], **THEME)
try:
    if args.command is None:
        sys.stderr.write(banner)
        sys.stderr.flush()
        parser.print_help()
        sys.exit()

    if args.command == '2': # send SIGINT to pids
        found = False
        for d in os.listdir(PID):
            found = True
            with open(f'{PID}/{d}', 'rb') as f:
                pid = int(f.read())
                printinfo(f'sending SIGINT to process {pid}...')
                os.kill(pid, signal.SIGINT)
        if not found:
            exit('no PIDs found')
    else: # create pid file
        os.makedirs(PID, exist_ok=True)
        f = tempfile.NamedTemporaryFile(dir=PID)
        f.write(str(os.getpid()).encode())
        f.flush()

    if args.command in {'cp', 'cat'}:
        db, _ = load(nonempty=True)
        tags = picktags(db, args.tags)
        rev = pickrev(db, tags, args.r)
        printinfo('entry to load:')
        printentry(db, tags, showpass=args.z)
        cp(db, tags, rev, KEY_USERNAME)
        if args.command == 'cp':
            cp(db, tags, rev, KEY_PASS, copy=sys.stdout.isatty())
        elif args.command == 'cat':
            cp(db, tags, rev, KEY_DATAB64, copy=False)

    elif args.command == 'add':
        tags = newtags(args.tags, required=True)
        password, datab64s = newpass(args.g, args.m, args.f, args.z,
            required=True)
        lock()
        db, dbpass = load()
        add(db, tags, args.u, password, datab64s, args.n)
        printinfo('added entry:')
        printentry(db, tags, showpass=args.z)
        save(db, dbpass)

    elif args.command == 'del':
        lock()
        db, dbpass = load(nonempty=True)
        options = [tags for tags in db if db[tags][0][KEY_ARC] == args.a]
        tags_list = search(args.tags, options=options)
        if len(tags_list) == 0:
            exit('nothing to delete')
        printwarn('entries to delete:')
        for tags in tags_list:
            printentry(db, tags, showpass=args.z)
            delete(db, tags)
        save(db, dbpass)

    elif args.command == 'undel':
        lock()
        db, dbpass = load(nonempty=True)
        options = [tags for tags in db if db[tags][0][KEY_ARC] == True]
        tags_list = search(args.tags, options=options)
        if len(tags_list) == 0:
            exit('nothing to delete')
        printinfo('entries to undelete:')
        for tags in tags_list:
            printentry(db, tags, showpass=args.z)
            undelete(db, tags)
        save(db, dbpass)

    elif args.command == 'mod':
        new_tags = newtags(args.t)
        password, datab64s = newpass(args.g, args.m, args.f, args.z)
        if {new_tags, args.u, password, datab64s, args.n} == {None}:
            exit('no changes requested')
        lock()
        db, dbpass = load(nonempty=True)
        cur_tags = picktags(db, args.tags, arc=args.a)
        printinfo('entry to modify:')
        printentry(db, cur_tags, showpass=args.z)
        modify(db, cur_tags, new_tags, args.u, password, datab64s, args.n)
        printinfo('entry after modification:')
        if new_tags is None:
            new_tags = cur_tags
        printentry(db, new_tags, showpass=args.z)
        save(db, dbpass)

    elif args.command == 'undo':
        lock()
        db, dbpass = load(nonempty=True)
        tags = picktags(db, args.tags, arc=args.a)
        rev = pickrev(db, tags, args.r, required=True)
        if rev == 0:
            exit(f'revision {rev} is already latest')
        printinfo('before undo:')
        printentry(db, tags, showpass=args.z, showold=True)
        timetravel(db, tags, rev)
        printinfo('after undo:')
        printentry(db, tags, showpass=args.z, showold=True)
        save(db, dbpass)

    elif args.command == 'forget':
        lock()
        db, dbpass = load(nonempty=True)
        options = [tags for tags in db if db[tags][0][KEY_ARC] == args.a]
        tags_list = search(args.tags, options=options)
        for tags in tags_list:
            printinfo('before forgetting:')
            printentry(db, tags, showpass=args.z, showold=True)
            rev = pickrev(db, tags, args.r)
            if rev >= len(db[tags]) - 1:
                printinfo('nothing to forget.  skipping...')
            else:
                forget(db, tags, rev)
                printwarn('after forgetting:')
                printentry(db, tags, showpass=args.z, showold=True)
            sys.stderr.write('\n')
        save(db, dbpass)

    elif args.command == 'ls':
        db, _ = load(nonempty=True)
        options = [tags for tags in db if db[tags][0][KEY_ARC] == args.a]
        tags_list = search(args.tags, options=options)
        printinfo('listing...')
        for tags in tags_list:
            printentry(db, tags, showpass=args.z, showold=args.o)

    elif args.command == 'chpass':
        lock()
        db, _ = load()
        save(db, None)

    else:
        exit(f'unknown command "{args.command}"')
except KeyboardInterrupt:
    printwarn('received keyboard interrupt.  exiting...')
except EOFError:
    printwarn('received end of file.  exiting...')
